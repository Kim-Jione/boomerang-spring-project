<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.bumerang.domain.likey.LikeyDao">

    <select id="findById"
            resultType="com.example.bumerang.domain.likey.Likey">
        SELECT * FROM likey WHERE likey_id=#{likeyId}
    </select>

    <select id="findAll"
            resultType="com.example.bumerang.domain.likey.Likey">
        SELECT *
        FROM likey
    </select>

    <insert id="insert">
        INSERT INTO likey (job_id, pf_id, comment_id, user_id)
        VALUES
        (#{jobId}, #{pfId}, #{commentId}, #{userId})
    </insert>

    <delete id="delete">
        DELETE FROM likey WHERE likey_id = #{likeyId}
    </delete>

    <select id="findByJobId"
            resultType="Integer">
        SELECT * FROM likey
        WHERE job_id=#{jobId} AND user_id = #{userId}
    </select>

    <select id="findByPfId"
            resultType="Integer">
        SELECT * FROM likey
        WHERE pf_id=#{pfId} AND user_id = #{userId}
    </select>

    <select id="findByCommentId"
            resultType="Integer">
        SELECT * FROM likey
        WHERE comment_id=#{commentId} AND user_id = #{userId}
    </select>
    <select id="findByRecent" resultType="com.example.bumerang.domain.likey.Likey">
        SELECT *
        FROM likey l
        WHERE l.likey_id=LAST_INSERT_ID()
    </select>

    <select id="likeyFindSJList" resultType="com.example.bumerang.web.dto.response.likey.LikeyJSListDto">
        SELECT
        u.user_id AS userId,
        u.user_nickname AS userNickname,
        u.user_profile_img AS userProfileImg,
        u.user_career AS userCareer,
        l.likey_id AS LikeyId,
        j.job_id AS jobId,
        j.job_content_title AS jobTitle,
        j.job_start_date AS jobStartDate,
        j.job_deadline AS jobDeadline,
        j.job_genre AS jobGenre,
        IF(DATEDIFF(j.job_deadline, CURDATE()) <![CDATA[ < ]]> 0, true, false) AS isDead,
        CASE WHEN DATE(j.created_at) = CURDATE() THEN TRUE ELSE FALSE END AS isToday,
        COALESCE(c.comment_count, 0) AS commentCount,
        COALESCE(v.view_count, 0) AS viewCount
        FROM user u
        INNER JOIN likey l ON u.user_id = l.user_id
        INNER JOIN job_search j ON l.job_id = j.job_id
        LEFT JOIN (
        SELECT job_id, COUNT(comment_id) AS comment_count
        FROM comment
        GROUP BY job_id
        ) c ON j.job_id = c.job_id
        LEFT JOIN (
        SELECT job_id, COUNT(view_id) AS view_count
        FROM view
        GROUP BY job_id
        ) v ON j.job_id = v.job_id
        WHERE u.user_id = 1
        ORDER BY l.created_at DESC;
    </select>
    <select id="likeyFindPFList" resultType="com.example.bumerang.web.dto.response.likey.LikeyPFListDto">
        SELECT
        u.user_id AS userId,
        u.user_nickname AS userNickname,
        u.user_profile_img AS userProfileImg,
        p.pf_id AS PFId,
        p.pf_title AS pfTitle,
        p.pf_start_date AS StartDate,
        p.pf_deadline AS Deadline,
        p.pf_genre AS genre,
        p.pf_runningTime AS runningTime,
        p.pf_location AS location,
        p.pf_thumbnail AS thumbnail,
        p.pf_agerating As ageRating,
        CASE WHEN p.pf_price = 0 THEN FALSE ELSE TRUE END AS isPrice,
        CASE WHEN p.pf_deadline >= CURDATE() THEN TRUE ELSE FALSE END AS isDead,
        COALESCE(c.comment_count, 0) AS commentCount,

        COALESCE(v.view_count, 0) AS viewCount
        FROM performance p
        LEFT JOIN (
        SELECT pf_id, COUNT(view_id) AS view_count
        FROM view
        WHERE pf_id IS NOT NULL
        GROUP BY pf_id
        ) v ON p.pf_id = v.pf_id
        WHERE p.pf_id IN (
        SELECT DISTINCT pf_id
        FROM likey
        WHERE user_id = #{userId}  -- 사용자 ID에 따라 좋아요한 공연을 검색
        )
        AND p.pf_status != 'deleted'
        ORDER BY pfId DESC;
    </select>
    <select id="findAllJoblikey"
            resultType="com.example.bumerang.web.dto.response.jobSearch.JobListDto">
        SELECT
        j.job_id AS jobId,
        j.job_genre AS jobGenre,
        j.job_deadline AS jobDeadline,
        j.job_content_title AS jobContentTitle,
        u.user_profile_img AS userProfileImg,
        u.user_nickname AS userNickname,
        u.user_career AS userCareer,
        u.user_id AS userId,
        COALESCE(v.view_count, 0) AS viewCount,
        COALESCE(c.comment_count, 0) AS commentCount,
        COALESCE(l.likey_count, 0) AS likeyCount,
        IF(DATEDIFF(j.job_deadline, CURDATE()) <![CDATA[ < ]]> 0, True, False) AS isDead,
        IF(DATE(j.created_at) = CURDATE(), TRUE, FALSE) AS isToday,
        IF((l.likey_count > 10), TRUE, false) AS isFame
        FROM job_search j
        JOIN user u ON j.user_id = u.user_id
        LEFT JOIN (
        SELECT job_id, COUNT(*) AS view_count FROM view GROUP BY job_id
        ) v ON j.job_id = v.job_id
        LEFT JOIN (
        SELECT job_id, COUNT(*) AS comment_count FROM comment WHERE comment_status = 'active' GROUP BY job_id
        ) c ON j.job_id = c.job_id
        LEFT JOIN (
        SELECT job_id, COUNT(*) AS likey_count FROM likey WHERE user_id = ${userId} GROUP BY job_id
        ) l ON j.job_id = l.job_id
        WHERE j.job_id IN (
        SELECT DISTINCT job_id
        FROM likey
        WHERE user_id = ${userId}
        )

        AND j.job_status = 'active' AND u.user_status != 'deleted'
        ORDER BY likeyCount DESC

        l ON p.pf_id = l.pf_id
        ORDER BY l.created_at DESC;
    </select>
</mapper>