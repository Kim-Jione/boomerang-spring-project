<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.bumerang.domain.likey.LikeyDao">

    <select id="findById"
            resultType="com.example.bumerang.domain.likey.Likey">
        SELECT * FROM likey WHERE likey_id=#{likeyId}
    </select>

    <select id="findAll"
            resultType="com.example.bumerang.domain.likey.Likey">
        SELECT *
        FROM likey
    </select>

    <insert id="insert">
        INSERT INTO likey (job_id, pf_id, comment_id, user_id)
        VALUES
        (#{jobId}, #{pfId}, #{commentId}, #{userId})
    </insert>

    <delete id="delete">
        DELETE FROM likey WHERE likey_id = #{likeyId}
    </delete>

    <select id="findByJobId"
            resultType="Integer">
        SELECT * FROM likey
        WHERE job_id=#{jobId} AND user_id = #{userId}
    </select>

    <select id="findByPfId"
            resultType="Integer">
        SELECT * FROM likey
        WHERE pf_id=#{pfId} AND user_id = #{userId}
    </select>

    <select id="findByCommentId"
            resultType="Integer">
        SELECT * FROM likey
        WHERE comment_id=#{commentId} AND user_id = #{userId}
    </select>
    <select id="findByRecent" resultType="com.example.bumerang.domain.likey.Likey">
        SELECT *
        FROM likey l
        WHERE l.likey_id=LAST_INSERT_ID()
    </select>
    <select id="likeyFindSJList" resultType="com.example.bumerang.web.dto.response.jobSearch.JobListDto">
        SELECT
        j.job_id AS jobId,
        j.created_at AS createdAt,
        j.job_genre AS jobGenre,
        j.job_deadline AS jobDeadline,
        j.job_content_title AS jobContentTitle,
        u.user_profile_img AS userProfileImg,
        u.user_nickname AS userNickname,
        u.user_career AS userCareer,
        u.user_id AS userId,
        (SELECT GROUP_CONCAT(jp.job_position_title) FROM job_search_position jp WHERE jp.job_id = j.job_id) as jobPositionTitles,
        COALESCE(v.view_count, 0) AS viewCount,
        COALESCE(c.comment_count, 0) AS commentCount,
        COALESCE(l.likey_count, 0) AS likeyCount,
        IF(DATEDIFF(j.job_deadline, CURDATE()) <![CDATA[ < ]]> 0, true, false) AS isDead,
        IF(DATE(j.created_at) = CURDATE(), TRUE, FALSE) AS isToday,
        IF((l.likey_count <![CDATA[ > ]]> 10), TRUE, false) AS isFame
    FROM
        (SELECT * 
         FROM job_search 
         WHERE job_status != 'deleted' AND job_id IN (SELECT job_id FROM likey WHERE user_id = #{userId})
        ) j
    JOIN
        (SELECT * 
         FROM user 
         WHERE user_status != 'deleted'
        ) u ON j.user_id = u.user_id
    LEFT JOIN (
        SELECT job_id, COUNT(*) AS view_count 
        FROM view 
        GROUP BY job_id
    ) v ON j.job_id = v.job_id
    LEFT JOIN (
        SELECT job_id, COUNT(*) AS comment_count 
        FROM comment 
        WHERE comment_status != 'deleted'
        GROUP BY job_id
    ) c ON j.job_id = c.job_id
    LEFT JOIN (
        SELECT job_id, COUNT(*) AS likey_count, user_id FROM likey WHERE job_id IS NOT NULL GROUP BY job_id
    ) l ON j.job_id = l.job_id
    ORDER BY
        j.created_at DESC
    </select>
    <select id="likeyFindPFList" resultType="com.example.bumerang.web.dto.response.performance.PfListDto">
        SELECT
        p.pf_id AS pfId,
        l.likey_id AS likeyId,
        p.pf_genre AS pfGenre,
        p.pf_deadline AS pfDeadline,
        p.pf_location AS pfLocation,
        p.pf_thumbnail AS pfThumbnail,
        p.pf_agerating AS pfAgeRating,
        p.pf_title AS pfTitle,
        u.user_profile_img AS userProfileImg,
        p.pf_start_date AS pfStartDate,
        u.user_nickname AS userNickname,
        u.user_career AS userCareer,
        p.user_id AS userId,
        CASE WHEN p.pf_price = 0 THEN FALSE ELSE TRUE END AS isPrice,
        COALESCE(v.view_count, 0) AS viewCount,
        COALESCE(c.comment_count, 0) AS commentCount,
        COUNT(l.pf_id) AS likeyCount,
        p.pf_status = 'dead' AS isDead,
        DATE(p.created_at) = CURDATE() AS isToday,
        COUNT(l.pf_id) >= 10 AS isFame
    FROM
        performance p
        LEFT JOIN likey l ON p.pf_id = l.pf_id
        LEFT JOIN (
            SELECT
                pf_id,
                COUNT(*) AS view_count
            FROM
                view
            GROUP BY
                pf_id
        ) v ON p.pf_id = v.pf_id
        LEFT JOIN (
            SELECT
                pf_id,
                COUNT(*) AS comment_count
            FROM
                comment
            WHERE
                comment_status = 'active'
            GROUP BY
                pf_id
        ) c ON p.pf_id = c.pf_id
        LEFT JOIN user u ON p.user_id = u.user_id
    WHERE
        l.user_id = #{userId}
    GROUP BY
        p.pf_id
    ORDER BY
        p.created_at DESC
    </select>
</mapper>